{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_ProfileModel.Exclude_keyofProfileModel.passwordHash__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IProfileDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ListResponse_IProfileDto-Array_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/IProfileDto"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_TProfileCreateModel_": {
				"properties": {
					"id": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"passwordHash": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"TProfileUpdateModel": {
				"$ref": "#/components/schemas/Partial_TProfileCreateModel_"
			},
			"ITokensDto": {
				"properties": {
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"accessToken",
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IProfileWithTokensDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"tokens": {
						"$ref": "#/components/schemas/ITokensDto"
					}
				},
				"required": [
					"tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_TProfileCreateModel.Exclude_keyofTProfileCreateModel.id-or-username-or-passwordHash__": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ISignUpRequestDto": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISignInRequestDto": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IWireguardPeerStatus": {
				"properties": {
					"publicKey": {
						"type": "string"
					},
					"preSharedKey": {
						"type": "string"
					},
					"endpoint": {
						"type": "string"
					},
					"allowedIps": {
						"type": "string"
					},
					"latestHandshakeAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"transferRx": {
						"type": "number",
						"format": "double"
					},
					"transferTx": {
						"type": "number",
						"format": "double"
					},
					"persistentKeepalive": {
						"type": "string"
					}
				},
				"required": [
					"publicKey",
					"preSharedKey",
					"endpoint",
					"allowedIps",
					"latestHandshakeAt",
					"transferRx",
					"transferTx",
					"persistentKeepalive"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IWgServerDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"profileId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"clients": {
						"items": {
							"$ref": "#/components/schemas/IWgClientsDto"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"InferAttributes_WgClient_": {
				"properties": {
					"id": {
						"type": "string"
					},
					"serverId": {
						"type": "string"
					},
					"profileId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"allowedIPs": {
						"type": "string"
					},
					"publicKey": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"preSharedKey": {
						"type": "string"
					},
					"transferRx": {
						"type": "number",
						"format": "double"
					},
					"transferTx": {
						"type": "number",
						"format": "double"
					},
					"latestHandshakeAt": {
						"type": "string",
						"format": "date-time"
					},
					"persistentKeepalive": {
						"type": "number",
						"format": "double"
					},
					"enabled": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Utility type to extract Attributes of a given Model class.\n\nIt returns all instance properties defined in the Model, except:\n- those inherited from Model (intermediate inheritance works),\n- the ones whose type is a function,\n- the ones manually excluded using the second parameter.\n- the ones branded using {@link NonAttribute}\n\nIt cannot detect whether something is a getter or not, you should use the `Excluded`\nparameter to exclude getter & setters from the attribute list."
			},
			"IWgClientsDto": {
				"properties": {
					"id": {
						"type": "string"
					},
					"serverId": {
						"type": "string"
					},
					"profileId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"allowedIPs": {
						"type": "string"
					},
					"publicKey": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"preSharedKey": {
						"type": "string"
					},
					"transferRx": {
						"type": "number",
						"format": "double"
					},
					"transferTx": {
						"type": "number",
						"format": "double"
					},
					"latestHandshakeAt": {
						"type": "string",
						"format": "date-time"
					},
					"persistentKeepalive": {
						"type": "number",
						"format": "double"
					},
					"enabled": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"profile": {
						"$ref": "#/components/schemas/IProfileDto"
					},
					"server": {
						"$ref": "#/components/schemas/IWgServerDto"
					}
				},
				"required": [
					"profile",
					"server"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InferAttributes_WgServer_": {
				"properties": {
					"id": {
						"type": "string"
					},
					"profileId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"privateKey": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Utility type to extract Attributes of a given Model class.\n\nIt returns all instance properties defined in the Model, except:\n- those inherited from Model (intermediate inheritance works),\n- the ones whose type is a function,\n- the ones manually excluded using the second parameter.\n- the ones branded using {@link NonAttribute}\n\nIt cannot detect whether something is a getter or not, you should use the `Excluded`\nparameter to exclude getter & setters from the attribute list."
			},
			"ListResponse_IWgClientsDto-Array_": {
				"properties": {
					"count": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/IWgClientsDto"
						},
						"type": "array"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IWgClientCreateRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"serverId": {
						"type": "string"
					},
					"allowedIPs": {
						"type": "string"
					},
					"persistentKeepalive": {
						"type": "number",
						"format": "double"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IWgClientUpdateRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"serverId": {
						"type": "string"
					},
					"allowedIPs": {
						"type": "string"
					},
					"persistentKeepalive": {
						"type": "number",
						"format": "double"
					},
					"enabled": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "wireguard-server",
		"version": "1.0.0",
		"description": "Wireguard API",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Epifanov Andrei",
			"email": "epifanovmd@gmail.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/profile": {
			"get": {
				"operationId": "GetAllProfiles",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListResponse_IProfileDto-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/profile/{id}": {
			"get": {
				"operationId": "GetProfileById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TProfileUpdateModel"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/profile/my": {
			"get": {
				"operationId": "GetMyProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileDto"
								}
							}
						}
					}
				},
				"tags": [
					"Profile"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/auth/signUp": {
			"post": {
				"operationId": "SignUp",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileWithTokensDto"
								}
							}
						}
					}
				},
				"description": "Endpoint description",
				"summary": "Endpoint summary.",
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Body param",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignUpRequestDto",
								"description": "Body param"
							}
						}
					}
				}
			}
		},
		"/api/auth/signIn": {
			"post": {
				"operationId": "SignIn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IProfileWithTokensDto"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignInRequestDto"
							}
						}
					}
				}
			}
		},
		"/api/auth/refresh": {
			"post": {
				"operationId": "Refresh",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ITokensDto"
								}
							}
						}
					}
				},
				"tags": [
					"Authorization"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"refreshToken": {
										"type": "string"
									}
								},
								"required": [
									"refreshToken"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/wireguard/start/{interfaceName}": {
			"get": {
				"operationId": "StartVpn",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Wireguard"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "interfaceName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/wireguard/stop/{interfaceName}": {
			"get": {
				"operationId": "StopVpn",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"tags": [
					"Wireguard"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "interfaceName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/wireguard/status/{interfaceName}": {
			"get": {
				"operationId": "CheckStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWireguardPeerStatus"
								}
							}
						}
					}
				},
				"tags": [
					"Wireguard"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "interfaceName",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "publicKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/wgclients/wgserver/create": {
			"post": {
				"operationId": "CreateWgServer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWgServerDto"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"required": [
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/wgclients/wgserver/delete/{id}": {
			"delete": {
				"operationId": "DeleteWgServer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWgServerDto"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/wgclients": {
			"get": {
				"operationId": "GetWgClients",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListResponse_IWgClientsDto-Array_"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/wgclients/{id}": {
			"get": {
				"operationId": "GetWgClient",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWgClientsDto"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateWgClient",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWgClientsDto"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IWgClientCreateRequest"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "UpdateWgClient",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IWgClientsDto"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IWgClientUpdateRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteWgClient",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"format": "double"
								}
							}
						}
					}
				},
				"tags": [
					"WgClient"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "http://77.91.85.77:8181",
			"description": "Prod"
		},
		{
			"url": "http://localhost:8181",
			"description": "Local dev"
		}
	]
}